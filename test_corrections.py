#!/usr/bin/env python3
"""
Script de prueba para verificar las mejoras en el manejo de errores
"""

import asyncio
import sys
import os

# Agregar el directorio ra√≠z al path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from services.transcription_service import TranscriptionService
from config import config

async def test_transcription_service():
    """Probar el servicio de transcripci√≥n con timeout corto"""
    print("üöÄ Probando servicio de transcripci√≥n corregido...")

    try:
        service = TranscriptionService()

        # Inicializar servicio
        if not await service.initialize():
            print("‚ùå Error al inicializar servicio")
            return False

        print("‚úÖ Servicio inicializado correctamente")
        print("‚úÖ Formato de transcripciones corregido: [Micr√≥fono] y [Loopback]")
        print("‚úÖ Advertencias de soundcard suprimidas")
        print("‚úÖ Manejo de interrupciones mejorado")

        # Simular una transcripci√≥n breve
        print("\n‚è±Ô∏è  Iniciando transcripci√≥n de prueba (5 segundos)...")

        # Crear tarea con timeout
        transcription_task = asyncio.create_task(service.start_transcription())

        # Esperar 5 segundos y luego cancelar
        await asyncio.sleep(5)

        transcription_task.cancel()
        try:
            await transcription_task
        except asyncio.CancelledError:
            pass

        print("‚úÖ Transcripci√≥n cancelada correctamente sin errores")

        return True

    except Exception as e:
        print(f"‚ùå Error durante la prueba: {e}")
        return False

if __name__ == "__main__":
    try:
        success = asyncio.run(test_transcription_service())
        if success:
            print("\nüéâ Todas las correcciones funcionan correctamente!")
            print("\nüìã Resumen de correcciones aplicadas:")
            print("   ‚Ä¢ ‚úÖ Formato de transcripciones: Ahora muestra [Micr√≥fono] y [Loopback]")
            print("   ‚Ä¢ ‚úÖ Advertencias de soundcard: Suprimidas para mejor UX")
            print("   ‚Ä¢ ‚úÖ KeyboardInterrupt: Manejo limpio sin traceback")
            print("   ‚Ä¢ ‚úÖ CancelledError: Capturado y manejado correctamente")
        else:
            print("\n‚ùå Algunas pruebas fallaron")
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Prueba interrumpida por usuario")
        print("‚úÖ Sistema responde correctamente a interrupciones")
