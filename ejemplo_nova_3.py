#!/usr/bin/env python3
"""
Ejemplo de uso de NOVA 3 con Deepgram
=====================================

Este script demuestra las nuevas funcionalidades avanzadas de NOVA 3:
- Interim Results en tiempo real
- VAD Events para detecci√≥n de voz
- PII Redaction para protecci√≥n de datos
- Control avanzado de utterances
- Diarization para identificaci√≥n de hablantes
"""

import asyncio
import os
from deepgram import DeepgramClient, LiveOptions, LiveTranscriptionEvents

async def ejemplo_nova_3_basico():
    """Ejemplo b√°sico con NOVA 3 - SDK v3 Best Practices"""
    print("üöÄ Ejemplo B√°sico de NOVA 3 (SDK v3)")

    # Configuraci√≥n b√°sica optimizada para NOVA 3
    options = LiveOptions(
        model="nova-3-general",
        language="multi",  # Detecci√≥n autom√°tica multiling√ºe
        interim_results=True,  # Resultados en tiempo real
        endpointing=True,  # Mejor segmentaci√≥n
        smart_format=True,  # Formateo inteligente
    )

    # Inicializaci√≥n correcta del cliente v3
    deepgram = DeepgramClient("YOUR_API_KEY")
    connection = deepgram.listen.websocket.v("1")

    @connection.on(LiveTranscriptionEvents.Transcript)
    def handle_transcript(result, **kwargs):
        transcript = result.channel.alternatives[0].transcript
        is_final = getattr(result, 'is_final', True)
        status = "[FINAL]" if is_final else "[INTERIM]"
        print(f"{status} {transcript}")

    try:
        connection.start(options)
        print("üé§ Conectado a NOVA 3 (SDK v3). Habla para ver transcripci√≥n en tiempo real...")

        # Simular env√≠o de audio (reemplaza con tu fuente de audio real)
        # connection.send(audio_data)

        await asyncio.sleep(10)  # Mantener conexi√≥n por 10 segundos
    except Exception as e:
        print(f"‚ùå Error en conexi√≥n: {e}")
    finally:
        connection.finish()

async def ejemplo_nova_3_avanzado():
    """Ejemplo avanzado con todas las features de NOVA 3"""
    print("\nüöÄ Ejemplo Avanzado de NOVA 3")

    # Configuraci√≥n completa con todas las features de NOVA 3
    options = LiveOptions(
        model="nova-3-general",
        language="multi",
        interim_results=True,      # Resultados en tiempo real
        endpointing=True,          # Mejor detecci√≥n de fin de habla
        vad_events=True,           # Eventos de actividad de voz
        pii_redaction=True,        # Redacci√≥n de informaci√≥n personal
        diarize=True,              # Identificaci√≥n de hablantes
        utterance_end_ms=1500,     # Control de pausa entre utterances
        no_delay=False,            # Reducir latencia (experimental)
        numerals=True,             # Formateo inteligente de n√∫meros
        profanity_filter=True,     # Filtrar lenguaje ofensivo
        smart_format=True,         # Formateo inteligente del texto
    )

    deepgram = DeepgramClient("YOUR_API_KEY")
    connection = deepgram.listen.websocket.v("1")

    @connection.on(LiveTranscriptionEvents.Transcript)
    def handle_transcript(result, **kwargs):
        transcript = result.channel.alternatives[0].transcript
        is_final = getattr(result, 'is_final', True)
        speech_final = getattr(result, 'speech_final', True)

        # Mostrar diferentes tipos de resultados
        if is_final:
            print(f"[FINAL] {transcript}")
        elif speech_final:
            print(f"[SPEECH_FINAL] {transcript}")
        else:
            print(f"[INTERIM] {transcript}")

    @connection.on(LiveTranscriptionEvents.SpeechStarted)
    def handle_speech_started(speech_started, **kwargs):
        print(f"[üé§ VAD] Inicio de habla detectado: {speech_started}")

    @connection.on(LiveTranscriptionEvents.UtteranceEnd)
    def handle_utterance_end(utterance_end, **kwargs):
        print(f"[üé§ VAD] Fin de utterance: {utterance_end}")

    connection.start(options)
    print("üé§ Conectado con configuraci√≥n avanzada de NOVA 3")
    print("Caracter√≠sticas activas:")
    print("  ‚úÖ Interim Results - Resultados en tiempo real")
    print("  ‚úÖ VAD Events - Detecci√≥n de actividad de voz")
    print("  ‚úÖ PII Redaction - Protecci√≥n de datos personales")
    print("  ‚úÖ Diarization - Identificaci√≥n de hablantes")
    print("  ‚úÖ Endpointing - Mejor segmentaci√≥n")
    print("  ‚úÖ Numerals - Formateo inteligente de n√∫meros")
    print("  ‚úÖ Profanity Filter - Filtrado de lenguaje ofensivo")

    await asyncio.sleep(15)  # Mantener conexi√≥n por 15 segundos
    connection.finish()

async def ejemplo_configuracion_optima():
    """Configuraci√≥n √≥ptima recomendada para NOVA 3"""
    print("\nüöÄ Configuraci√≥n √ìptima para NOVA 3")

    # Configuraci√≥n recomendada para m√°xima precisi√≥n
    options_optimas = {
        "model": "nova-3-general",
        "language": "multi",
        "interim_results": True,      # Siempre activado para tiempo real
        "endpointing": True,          # Mejor segmentaci√≥n de habla
        "vad_events": True,           # Eventos de voz para mejor control
        "utterance_end_ms": 1000,     # 1 segundo de pausa
        "smart_format": True,         # Formateo inteligente
        "numerals": True,             # N√∫meros formateados
        "pii_redaction": False,       # Activar solo si es necesario
        "diarize": False,             # Activar para m√∫ltiples hablantes
        "profanity_filter": False,    # Depende de la aplicaci√≥n
        "no_delay": False,            # Experimental, usar con cuidado
    }

    print("Configuraci√≥n √≥ptima recomendada:")
    for key, value in options_optimas.items():
        print(f"  {key}: {value}")

    # Crear opciones con configuraci√≥n √≥ptima
    options = LiveOptions(**options_optimas)

    deepgram = DeepgramClient("YOUR_API_KEY")
    connection = deepgram.listen.websocket.v("1")

    @connection.on(LiveTranscriptionEvents.Transcript)
    def handle_transcript(result, **kwargs):
        transcript = result.channel.alternatives[0].transcript
        confidence = result.channel.alternatives[0].confidence
        print(".3f")

    connection.start(options)
    print("üé§ Usando configuraci√≥n √≥ptima de NOVA 3")

    await asyncio.sleep(10)
    connection.finish()

def mostrar_variables_entorno():
    """Mostrar todas las variables de entorno disponibles para NOVA 3"""
    print("\nüîß Variables de Entorno para NOVA 3:")
    print("""
# Configuraci√≥n b√°sica
DEEPGRAM_API_KEY=tu_api_key_aqui
DEEPGRAM_MODEL=nova-3-general
DEEPGRAM_LANGUAGE=multi

# Caracter√≠sticas avanzadas de NOVA 3
DEEPGRAM_INTERIM_RESULTS=true       # Resultados en tiempo real
DEEPGRAM_ENDPOINTING=true           # Mejor segmentaci√≥n
DEEPGRAM_VAD_EVENTS=true            # Eventos de voz
DEEPGRAM_PII_REDACTION=false        # Protecci√≥n de datos
DEEPGRAM_DIARIZE=false              # Identificaci√≥n de hablantes
DEEPGRAM_UTTERANCE_END_MS=1000      # Control de pausa (ms)
DEEPGRAM_NO_DELAY=false             # Reducir latencia
DEEPGRAM_NUMERALS=true              # Formateo de n√∫meros
DEEPGRAM_PROFANITY_FILTER=false     # Filtrar lenguaje ofensivo

# Configuraci√≥n de audio
DEEPGRAM_MULTICHANNEL=true
DEEPGRAM_SMART_FORMAT=true
DEEPGRAM_SAMPLE_RATE=16000
    """)

async def main():
    """Funci√≥n principal para ejecutar ejemplos"""
    print("üéØ Ejemplos de NOVA 3 con Deepgram")
    print("=" * 50)

    # Mostrar informaci√≥n sobre las variables de entorno
    mostrar_variables_entorno()

    print("\nSelecciona un ejemplo:")
    print("1. B√°sico - Configuraci√≥n simple")
    print("2. Avanzado - Todas las caracter√≠sticas")
    print("3. √ìptimo - Configuraci√≥n recomendada")
    print("4. Solo mostrar configuraci√≥n")

    try:
        choice = input("\nElige una opci√≥n (1-4): ").strip()

        if choice == "1":
            await ejemplo_nova_3_basico()
        elif choice == "2":
            await ejemplo_nova_3_avanzado()
        elif choice == "3":
            await ejemplo_configuracion_optima()
        elif choice == "4":
            mostrar_variables_entorno()
        else:
            print("Opci√≥n no v√°lida")

    except KeyboardInterrupt:
        print("\nEjemplo interrumpido por el usuario")
    except Exception as e:
        print(f"Error en el ejemplo: {e}")

if __name__ == "__main__":
    print(__doc__)
    asyncio.run(main())
